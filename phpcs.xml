<?xml version="1.0"?>
<ruleset name="project-coding-standards">
    <description>Coding standards for SilverStripe based project</description>

    <!-- Don't sniff third party libraries -->
    <exclude-pattern>./vendor/*</exclude-pattern>
    <exclude-pattern>*/thirdparty/*</exclude-pattern>

    <!-- Show progress and output sniff names on violation, and add colours -->
    <arg value="p" />
    <arg name="colors" />
    <arg value="s" />

    <!-- Use PSR-2 as a base standard -->
    <rule ref="PSR2">
        <!-- Allow non camel cased method names - some base SS method names are PascalCase or snake_case -->
        <exclude name="PSR1.Methods.CamelCapsMethodName.NotCamelCaps"/>
        <!-- This rule conflicts with Slevomat standards requiring an empty line before closing brace -->
        <exclude name="PSR2.Classes.ClassDeclaration.CloseBraceAfterBody"/>
    </rule>

    <!-- allow only class Page and PageController to be without namespace -->
    <rule ref="PSR1.Classes.ClassDeclaration.MissingNamespace">
        <exclude-pattern>Page\.php</exclude-pattern>
        <exclude-pattern>PageController\.php</exclude-pattern>
    </rule>

    <!-- Ensures that arrays are indented one tab stop -->
    <rule ref="Generic.Arrays.ArrayIndent"/>
    <!-- Makes sure that any use of double quotes strings are warranted -->
    <rule ref="Squiz.Strings.DoubleQuoteUsage"/>

    <!-- All "use" statements must be used in the code. -->
    <rule ref="./vendor/slevomat/coding-standard/SlevomatCodingStandard/ruleset.xml">
        <!-- Multi or single line are both fine. Feel free to remove this exclusion if you prefer to enforce single line where they're possible -->
        <exclude name="SlevomatCodingStandard.Commenting.RequireOneLineDocComment.MultiLineDocComment"/>
        <exclude name="SlevomatCodingStandard.Commenting.DisallowOneLinePropertyDocComment.OneLinePropertyComment"/>
        <!-- We're not punishing folks for adding annotations (even if the method is self documenting) -->
        <exclude name="SlevomatCodingStandard.TypeHints.ReturnTypeHint.UselessAnnotation"/>
        <!-- There is actually a bug with this sniffer. If you use doc annotation to disable a rule, this sniffer (sometimes) throws an "Undefined index" error -->
        <exclude name="SlevomatCodingStandard.Commenting.DisallowCommentAfterCode.DisallowedCommentAfterCode"/>
        <!-- Late Static Binding is used often in SS -->
        <exclude name="SlevomatCodingStandard.Classes.DisallowLateStaticBindingForConstants"/>
        <!-- Multiline comments is what we use as a standard in SS -->
        <exclude name="SlevomatCodingStandard.Commenting.RequireOneLinePropertyDocComment"/>
        <!-- Disabled by default, but you may be interested in reading up on Yoda conditions to see if it's -->
        <!-- something that you would like to start using: https://en.wikipedia.org/wiki/Yoda_conditions -->
        <exclude name="SlevomatCodingStandard.ControlStructures.RequireYodaComparison.RequiredYodaComparison"/>
        <!-- It's quite common when extended base SS methods or extension points, that there are unused params -->
        <exclude name="SlevomatCodingStandard.Functions.UnusedParameter"/>
        <!-- Allows us to namespace {} the base Page class -->
        <exclude name="SlevomatCodingStandard.Namespaces.NamespaceDeclaration.DisallowedBracketedSyntax"/>
        <!-- There are two rules which conflict. NewWithoutParentheses and UselessParentheses. One must be disabled -->
        <!-- We allow new Class(); rather than new Class;-->
        <exclude name="SlevomatCodingStandard.ControlStructures.NewWithoutParentheses"/>
        <!-- Do not require fully qualified class names in annotation -->
        <exclude name="SlevomatCodingStandard.Namespaces.FullyQualifiedClassNameInAnnotation.NonFullyQualifiedClassName"/>
        <!-- We generally allow the use of any namespace -->
        <exclude name="SlevomatCodingStandard.Namespaces.UseOnlyWhitelistedNamespaces"/>
        <!-- Not something we do in SS -->
        <exclude name="SlevomatCodingStandard.TypeHints.DeclareStrictTypes"/>
        <!-- Array type hint syntax is very useful -->
        <exclude name="SlevomatCodingStandard.TypeHints.DisallowArrayTypeHintSyntax"/>
        <!-- Using mixed type is a way to get around the fact that we often cannot strictly type our methods if we -->
        <!-- are extending a base SS method -->
        <exclude name="SlevomatCodingStandard.TypeHints.DisallowMixedTypeHint"/>
        <!-- allow private static -->
        <exclude name="SlevomatCodingStandard.Classes.UnusedPrivateElements.UnusedProperty"/>
        <!-- disable until php 7.3 is implemented in the project -->
        <exclude name="SlevomatCodingStandard.Functions.TrailingCommaInCall.MissingTrailingComma"/>
        <!-- disable until IDEs support new array phpdoc -->
        <exclude name="SlevomatCodingStandard.TypeHints.DisallowArrayTypeHintSyntax"/>
        <!-- Don't require traversable type hints -->
        <exclude name="SlevomatCodingStandard.TypeHints.ParameterTypeHint.MissingTraversableTypeHintSpecification"/>
        <exclude name="SlevomatCodingStandard.TypeHints.PropertyTypeHint.MissingTraversableTypeHintSpecification"/>
        <exclude name="SlevomatCodingStandard.TypeHints.ReturnTypeHint.MissingTraversableTypeHintSpecification"/>
        <!-- Even if you strictly type, there are other reasons to add a DocComment (EG: to add @codeCoverageIgnore -->
        <exclude name="SlevomatCodingStandard.TypeHints.UselessConstantTypeHintSniff.UselessDocComment"/>
        <!-- Even if you strictly type, there are other reasons to add a DocComment (EG: to add @codeCoverageIgnore -->
        <exclude name="SlevomatCodingStandard.Commenting.UselessFunctionDocComment.UselessDocComment"/>
    </rule>

    <rule ref="SlevomatCodingStandard.Namespaces.UnusedUses">
        <properties>
            <property name="searchAnnotations" type="bool" value="true"/>
            <property name="ignoredAnnotationNames" type="array" value="@config"/>
        </properties>
    </rule>

    <rule ref="SlevomatCodingStandard.Files.TypeNameMatchesFileName">
        <properties>
            <!-- Set the root namespace for our src dir and phpunit dir. Please change these as required -->
            <property name="rootNamespaces" type="array" value="app/src=>App,app/tests/php=>App\Tests"/>
            <property name="ignoredNamespaces" type="array" value="Slevomat\Services"/>
        </properties>

        <!-- allow only class Page and PageController to not match path -->
        <exclude-pattern>Page\.php</exclude-pattern>
        <exclude-pattern>PageController\.php</exclude-pattern>
    </rule>
</ruleset>
