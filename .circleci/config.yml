# PHP CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-php/ for more details
#
version: 2.1

executors:
  docker-executor:
    docker:
      # Details of what this image contains available at https://github.com/silverstripeltd/bespoke-ci-base/
      - image: ghcr.io/silverstripeltd/bespoke-ci-base:3.2.1
        environment:
          DISPLAY: :99
          CHROME_BIN: /usr/bin/google-chrome-stable
          BASH_ENV: /root/.bashrc
      - image: circleci/mysql:5.7
        environment:
          MYSQL_ROOT_PASSWORD: ubuntu
          MYSQL_DATABASE: circle_test
          MYSQL_HOST: 127.0.0.1
    working_directory: /var/www/mysite/www

commands:
  background-services:
    description: Start Apache, Nginx and Xvfb
    steps:
      - run:
          command: Xvfb :99 -screen 0 1280x1024x24
          background: true
      - run: sudo service apache2 start
      - run: sudo service nginx start
  dependencies:
    description: Install dependencies
    steps:
      # Composer Cache + Installation
      - restore_cache:
          keys:
            - v1-composer-{{ checksum "composer.lock" }}
            # fallback to using the latest cache if no exact match is found
            - v1-composer-
      # prefer source composer install to make test files available
      - run: composer install -n --prefer-source --no-interaction
      - run: composer vendor-expose # always expose: cached content is never exposed automatically
      # Save all dependencies to cache
      - save_cache:
          key: v1-composer-{{ checksum "composer.lock" }}
          paths:
            - vendor
            - resources

      # NPM Cache + Installation
      - restore_cache:
          keys:
            - v1-npm-deps-{{ checksum "yarn.lock" }}
      - run: yarn install --frozen-lockfile
      - save_cache:
          paths:
            - ./node_modules
            - /root/.cache/Cypress
          key: v1-npm-deps-{{ checksum "yarn.lock" }}
  php-tests:
    description: phpunit tests
    parameters:
      coverage:
        type: boolean
        default: true
    steps:
      - run:
          name: phpunit
          command: |
            phpdismod xdebug
            PHPUNITARGS=""
            if << parameters.coverage >>;
            then
                # enable the line below if you are requiring private repos (e.g. silverstripeltd/elasticsearchapp)
                # see https://docs.github.com/en/github/authenticating-to-github/keeping-your-account-and-data-secure/creating-a-personal-access-token
                # composer config http-basic.github.com $SERVICE_ACCOUNT_USERNAME $SERVICE_ACCOUNT_GITHUB_API_TOKEN
                phpenmod -v 7.4 pcov
                composer require pcov/clobber
                vendor/bin/pcov clobber
                PHPUNITARGS=" --coverage-html coverage/php  --coverage-clover coverage/php/clover.xml"
            fi
            vendor/bin/phpunit --verbose $PHPUNITARGS
  js-tests:
    description: JS/Vue Tests
    steps:
      - run: yarn test:app
  e2e-tests:
    description: JS E2E tests
    steps:
      - run: yarn test:e2e
  lighthouse-checks:
    description: Lighthouse checks
    steps:
      - run:
          name: Lighthouse checks
          command: |
            yarn build
            npm install -g @lhci/cli@0.8.x
            lhci autorun --upload.basicAuth.username=silverstripe --upload.basicAuth.password=${LHCI_BASIC_AUTH_PASSWORD}

jobs:
  build:
    executor: docker-executor

    steps:
      - checkout
      # Use correct php version
      - run: php-switch 7.4
      # Use correct node version
      - run: nvm alias default $(cat .nvmrc)
      - run: mv .circleci/.env.circleci .env

      - background-services
      - dependencies

      # setup permissions
      - run: chown -R vagrant:vagrant /var/www/mysite/www
      - run: chmod g+s /var/www/mysite/www/public

      # Build dev files for coverage instrumentation
      - run: yarn dev

      # JS/SCSS/PHP Linting
      - run: composer silverstripe-standards

      # dev/build
      - run: sudo -u vagrant vendor/bin/sake dev/build flush=1

      # run test suites
      - php-tests
      - js-tests
      - e2e-tests
      - lighthouse-checks

      # Generate coverage reports
      - run: yarn test:coverage

      # Requires $CODECOV_TOKEN variable set in CircleCI
      - run:
          name: Send coverage to codecov.io
          command: |
            curl -s https://codecov.io/bash > codecov;
            VERSION=$(grep 'VERSION=\".*\"' codecov | cut -d'"' -f2);
            shasum -a 512 -c  <(curl -s https://raw.githubusercontent.com/codecov/codecov-bash/${VERSION}/SHA512SUM | grep codecov);
            bash <(cat codecov) || echo "Codecov submission failed, check https://status.codecov.io"

      - store_artifacts:
          path: cypress/screenshots

      - store_artifacts:
          path: cypress/videos

      - store_artifacts:
          path: coverage
